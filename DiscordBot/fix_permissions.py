#!/usr/bin/env python3
"""
Fix Permissions Script for Ollama Scanner Bot

This script generates an admin invite URL and instructions for fixing
the bot's permission issues with command registration.
"""

import os
import sys
import argparse
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get bot token and client ID
TOKEN = os.getenv('DISCORD_TOKEN')
CLIENT_ID = os.getenv('DISCORD_CLIENT_ID') 
GUILD_ID = os.getenv('DISCORD_GUILD_ID', '936535618278809670')

def extract_client_id_from_token():
    """Extract client ID from bot token if not provided in env vars"""
    if not TOKEN:
        print("ERROR: No Discord token found in environment variables!")
        return None
    
    try:
        # Bot tokens have format: MTM2MDUz.XXXX.XXXX
        # First part is base64 encoded client ID
        import base64
        token_parts = TOKEN.split('.')
        if len(token_parts) != 3:
            return None
            
        # Decode the first part
        try:
            decoded = base64.b64decode(token_parts[0] + "==").decode('utf-8')
            return decoded
        except:
            return None
    except:
        return None

def get_client_id():
    """Get client ID from environment or extract from token"""
    if CLIENT_ID:
        return CLIENT_ID
    
    # Try to extract from token
    extracted_id = extract_client_id_from_token()
    if extracted_id:
        return extracted_id
    
    # If we still don't have it, ask the user
    print("Client ID not found in environment variables.")
    return input("Please enter your bot's client ID: ")

def generate_admin_invite_url(client_id):
    """Generate an invite URL with administrator permissions"""
    # Permissions integer 8 = Administrator permission
    # Scopes: bot and applications.commands
    return f"https://discord.com/api/oauth2/authorize?client_id={client_id}&permissions=8&scope=bot%20applications.commands"

def generate_guild_invite_url(client_id, guild_id):
    """Generate an invite URL for a specific guild with administrator permissions"""
    # For a specific guild (requires mutual server with the person clicking)
    return f"https://discord.com/api/oauth2/authorize?client_id={client_id}&permissions=8&scope=bot%20applications.commands&guild_id={guild_id}"

def generate_minimal_invite_url(client_id):
    """Generate an invite URL with minimal permissions required"""
    # Permissions for basic operation (send messages, embed links, etc.)
    permissions = 2147485760  # Combined permissions for basic operation
    return f"https://discord.com/api/oauth2/authorize?client_id={client_id}&permissions={permissions}&scope=bot%20applications.commands"

def main():
    """Main function to generate invite URLs and instructions"""
    parser = argparse.ArgumentParser(description='Fix Discord bot permissions by generating invite links')
    parser.add_argument('--reauth', action='store_true', help='Force reauthorization even if bot is already in server')
    args = parser.parse_args()
    
    client_id = get_client_id()
    if not client_id:
        print("ERROR: Could not determine client ID. Please set DISCORD_CLIENT_ID in your .env file.")
        sys.exit(1)
    
    admin_url = generate_admin_invite_url(client_id)
    guild_url = generate_guild_invite_url(client_id, GUILD_ID)
    minimal_url = generate_minimal_invite_url(client_id)
    
    print("\n======================================================================")
    print("                      BOT PERMISSIONS FIX")
    print("======================================================================\n")
    
    print("The 'Missing Access' error occurs when the bot doesn't have the")
    print("necessary permissions to register slash commands.\n")
    
    print("SOLUTION:")
    print("1. Remove the bot from your server (if it's already added)")
    print("2. Add it back using one of these invite links:\n")
    
    print("ADMINISTRATOR PERMISSIONS (RECOMMENDED):")
    print(f"{admin_url}\n")
    
    print("SPECIFIC GUILD WITH ADMINISTRATOR PERMISSIONS:")
    print(f"{guild_url}\n")
    
    print("MINIMAL PERMISSIONS (MAY NOT WORK FOR ALL FEATURES):")
    print(f"{minimal_url}\n")
    
    print("IMPORTANT: When authorizing, ensure you check ALL permission boxes!")
    print("======================================================================\n")
    
    if args.reauth:
        # Additional steps to force resync commands
        print("After re-adding the bot, run the following command to force resync commands:")
        print(f"cd {os.path.dirname(os.path.abspath(__file__))} && python guild_unified_commands.py\n")
    
    # Save the URLs to a file for easy reference
    with open("bot_invite_urls.txt", "w") as f:
        f.write("Bot Invite URLs (generated by fix_permissions.py)\n")
        f.write("==============================================\n\n")
        f.write(f"Administrator Permissions: {admin_url}\n\n")
        f.write(f"Specific Guild Admin: {guild_url}\n\n")
        f.write(f"Minimal Permissions: {minimal_url}\n\n")
        f.write("Instructions:\n")
        f.write("1. Remove the bot from your server (Server Settings > Integrations)\n")
        f.write("2. Click one of the URLs above to re-add the bot with proper permissions\n")
        f.write("3. Run: python guild_unified_commands.py\n")
    
    print(f"Invite URLs saved to: {os.path.join(os.path.dirname(os.path.abspath(__file__)), 'bot_invite_urls.txt')}")

if __name__ == '__main__':
    main() 